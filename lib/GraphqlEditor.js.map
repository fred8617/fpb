{"version":3,"sources":["../src/FPB/GraphqlEditor.tsx"],"names":["create","Item","GraphqlEditor","props","client","ref","footerRef","store","visible","setVisible","setTimeout","minuHeight","current","clientHeight","console","log","value","getQueryEditor","getValue","onChange","padding","getItem","setItem","param","query"],"mappings":"y1CAeQA,CAAAA,M,eAAAA,M,CAAQC,I,eAAAA,I,CACVC,aAAsC,CAAG,SAAAC,CAAK,CAAI,IAChDC,CAAAA,CAAM,CAAG,iCADuC,CAEhDC,CAAG,CAAG,mBAF0C,CAGhDC,CAAc,CAAG,mBAH+B,CAIhDC,CAAK,CAAG,iCAAc,iBAAO,CACjCC,OAAO,GAD0B,CAEjCC,UAFiC,qBAEtBD,CAFsB,CAEb,CAClBD,CAAK,CAACC,OAAN,CAAgBA,CADE,CAEdA,CAFc,EAGhBE,UAAU,CAAC,UAAM,CACfH,CAAK,CAACI,UAAN,CAAmBL,CAAS,CAACM,OAAV,CAAkBC,YAAlB,CAAiC,EADrC,CAEf,2BACD,CAHS,CAGP,GAHO,CAKb,CAVgC,CAWjCF,UAAU,CAAE,CAXqB,CAAP,CAAd,CAJwC,CAoBtD,MAHA,qBAAU,UAAM,CACdG,OAAO,CAACC,GAAR,CAAYV,CAAZ,CACD,CAFD,CAEG,EAFH,CAGA,CACE,0DACE,wPADF,CAWE,8CAAQ,OAAO,CAAE,yBAAKE,CAAAA,CAAK,CAACE,UAAN,IAAL,CAAjB,8BAXF,CAYE,6BAAC,uBAAD,MACG,iBACC,8BAAC,wBAAD,EACE,UAAU,CAAEF,CAAK,CAACI,UADpB,CAEE,QAAQ,GAFV,CAGE,IAAI,CAAE,eAAM,CAAE,CAHhB,CAIE,cAAc,GAJhB,CAKE,MAAM,CACJ,oCAAK,GAAG,CAAEL,CAAV,EACE,4CAAM,MAAM,CAAC,QAAb,EACE,6BAAC,IAAD,MACE,8CACE,IAAI,CAAC,SADP,CAEE,OAAO,CAAE,kBAAK,CACZ,GAAMU,CAAAA,CAAK,CAAIX,CAAG,CAACO,OAAL,CACXK,cADW,GAEXC,QAFW,EAAd,CAGIf,CAAK,CAACgB,QAJE,EAKVhB,CAAK,CAACgB,QAAN,CAAeH,CAAf,CAEH,CATH,iBADF,CADF,CAgBE,6BAAC,IAAD,MACE,8CACE,IAAI,CAAC,QADP,CAEE,OAAO,CAAE,kBAAK,CACZ,GAAMA,CAAAA,CAAK,CAAIX,CAAG,CAACO,OAAL,CACXK,cADW,GAEXC,QAFW,EAAd,CAGIf,CAAK,CAACgB,QAJE,EAKVhB,CAAK,CAACgB,QAAN,CAAeH,CAAf,CALU,CAOZT,CAAK,CAACE,UAAN,IACD,CAVH,mCADF,CAhBF,CAgCE,6BAAC,IAAD,MACE,8CACE,OAAO,CAAE,kBAAK,CACZF,CAAK,CAACE,UAAN,IACD,CAHH,iBADF,CAhCF,CADF,CANJ,CAmDE,QAAQ,CAAE,0BAAKF,CAAAA,CAAK,CAACE,UAAN,IAAL,CAnDZ,CAoDE,OAAO,CAAEF,CAAK,CAACC,OApDjB,CAqDE,SAAS,CAAE,CAAEY,OAAO,CAAE,CAAX,CArDb,EAuDGb,CAAK,CAACC,OAAN,EACC,6BAAC,qBAAD,MACG,iBACC,8BAAC,iBAAD,EACE,KAAK,CAAEL,CAAK,CAACa,KADf,CAEE,GAAG,CAAEX,CACL;AACA;AAJF,CAKE,OAAO,CAAE,CAAEgB,OAAF,mBAAY,CAAE,CAAd,CAAgBC,OAAhB,mBAA0B,CAAE,CAA5B,CALX,CAME,aAAa,CAAE,OANjB,CAOE,OAAO,CAAE,iBAAAC,CAAK,QAAInB,CAAAA,CAAM,CAACoB,KAAP,CAAa,CAAEA,KAAK,CAAE,wBAAID,CAAK,CAACC,KAAV,CAAT,CAAb,CAAJ,CAPhB,EASE,6BAAC,iBAAD,CAAU,IAAV,qBATF,CADD,CADH,CAxDJ,CADD,CADH,CAZF,CA2FH,C","sourcesContent":["import React, { SFC, useRef, useEffect } from 'react';\r\nimport GraphiQL from 'graphiql';\r\nimport 'graphiql/graphiql.css';\r\nimport { useApolloClient } from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag';\r\nimport FullScreenModal from './FullScreenModal';\r\nimport { printSchema } from 'graphql';\r\nimport { useLocalStore, Observer } from 'mobx-react-lite';\r\nimport { Button, Form } from 'antd';\r\nimport { doWindowResize } from './utils';\r\nimport ErrorWrapper from './ErrorWrapper';\r\ninterface GraphqlEditorProps {\r\n  onChange?(e);\r\n  value?;\r\n}\r\nconst { create, Item } = Form;\r\nconst GraphqlEditor: SFC<GraphqlEditorProps> = props => {\r\n  const client = useApolloClient();\r\n  const ref = useRef();\r\n  const footerRef: any = useRef();\r\n  const store = useLocalStore(() => ({\r\n    visible: false,\r\n    setVisible(visible) {\r\n      store.visible = visible;\r\n      if (visible) {\r\n        setTimeout(() => {\r\n          store.minuHeight = footerRef.current.clientHeight + 21;\r\n          doWindowResize();\r\n        }, 200);\r\n      }\r\n    },\r\n    minuHeight: 0,\r\n  }));\r\n  useEffect(() => {\r\n    console.log(ref);\r\n  }, []);\r\n  return (\r\n    <>\r\n      <style>\r\n        {`\r\n        \r\n        .graphiql-container .doc-explorer-title, .graphiql-container .history-title{\r\n            padding: 0px;\r\n            height: 34px;\r\n            line-height: 34px;\r\n        }\r\n        `}\r\n      </style>\r\n      <Button onClick={_ => store.setVisible(true)}>Graphql编辑器</Button>\r\n      <Observer>\r\n        {() => (\r\n          <FullScreenModal\r\n            minuHeight={store.minuHeight}\r\n            closable={false}\r\n            onOk={() => {}}\r\n            destroyOnClose\r\n            footer={\r\n              <div ref={footerRef}>\r\n                <Form layout=\"inline\">\r\n                  <Item>\r\n                    <Button\r\n                      type=\"primary\"\r\n                      onClick={_ => {\r\n                        const value = (ref.current as any)\r\n                          .getQueryEditor()\r\n                          .getValue();\r\n                        if (props.onChange) {\r\n                          props.onChange(value);\r\n                        }\r\n                      }}\r\n                    >\r\n                      保存\r\n                    </Button>\r\n                  </Item>\r\n                  <Item>\r\n                    <Button\r\n                      type=\"danger\"\r\n                      onClick={_ => {\r\n                        const value = (ref.current as any)\r\n                          .getQueryEditor()\r\n                          .getValue();\r\n                        if (props.onChange) {\r\n                          props.onChange(value);\r\n                        }\r\n                        store.setVisible(false);\r\n                      }}\r\n                    >\r\n                      保存并关闭\r\n                    </Button>\r\n                  </Item>\r\n                  <Item>\r\n                    <Button\r\n                      onClick={_ => {\r\n                        store.setVisible(false);\r\n                      }}\r\n                    >\r\n                      关闭\r\n                    </Button>\r\n                  </Item>\r\n                </Form>\r\n              </div>\r\n            }\r\n            onCancel={_ => store.setVisible(false)}\r\n            visible={store.visible}\r\n            bodyStyle={{ padding: 0 }}\r\n          >\r\n            {store.visible && (\r\n              <ErrorWrapper>\r\n                {() => (\r\n                  <GraphiQL\r\n                    query={props.value}\r\n                    ref={ref}\r\n                    // response={`{a:1}`}\r\n                    //   query={null}\r\n                    storage={{ getItem() {}, setItem() {} }}\r\n                    operationName={'query'}\r\n                    fetcher={param => client.query({ query: gql(param.query) })}\r\n                  >\r\n                    <GraphiQL.Logo>FPB Graphiql</GraphiQL.Logo>\r\n                  </GraphiQL>\r\n                )}\r\n              </ErrorWrapper>\r\n            )}\r\n          </FullScreenModal>\r\n        )}\r\n      </Observer>\r\n    </>\r\n  );\r\n};\r\nexport { GraphqlEditor as default };\r\n"],"file":"GraphqlEditor.js"}