{"version":3,"sources":["../src/FPB/ItemSettingForm.tsx"],"names":["Option","OptGroup","TreeNode","Panel","Size","getFormItemCol","width","col","labelCol","span","wrapperCol","getCol","size","LARGE","MIDDLE","SMALL","create","Item","ItemSettingForm","props","form","item","onItemPropsChange","console","log","recurseEverything","initialKeyCounter","keyCounter","setKeyCounter","recordItem","current","resetFields","setTimeout","Object","keys","length","getFieldsValue","componentProps","setFieldsValue","initialValue","getFieldDecorator","getFieldValue","renderTypeTreeNode","component","children","id","label","map","componentTypeDec","componentId","autoHeightDec","valuePropName","autoHeight","isFormFieldDec","isFormField","$idDec","$id","labelDec","flatComponents","formField","sortProps","destination","source","values","arr","droppableId","dragValue","index","splice","deleteProp","propName","createComponentPropsForm","prefix","componentPropsEntries","entries","filter","prop","type","indexOf","i","name","setting","options","rules","components","mapedArr","e","push","provided","droppableProps","innerRef","p","pi","key","draggableProps","margin","dragHandleProps","_","placeholder","color","cursor","propsDecModels","maxHeight","overflow","componentGroup","groupOrComponent","settingForm","onValuesChange","changedValues","allValues","field","value","onItemTypeChange","onFieldsChange","fields"],"mappings":"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","sourcesContent":["import {\r\n  Form,\r\n  Select,\r\n  TreeSelect,\r\n  Input,\r\n  Switch,\r\n  Tooltip,\r\n  Icon,\r\n  Button,\r\n  Radio,\r\n  Collapse,\r\n  Row,\r\n  Col,\r\n  Divider,\r\n  Card,\r\n} from 'antd';\r\nimport { FormComponentProps } from 'antd/lib/form';\r\nimport {\r\n  ComponentGroup,\r\n  ComponentType,\r\n  FPBItem,\r\n  ComponentProps,\r\n} from './useFPBStore';\r\nimport React, { useState, useEffect, Fragment, useRef } from 'react';\r\nimport { get } from 'lodash';\r\nimport CommonInput from './CommonInput';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport useSizeMe from './useSizeMe';\r\nimport { toJS } from 'mobx';\r\nimport { getObjectKeysWhenIsArray } from './utils';\r\nimport FPBForm from './FPBForm';\r\nimport GraphqlEditor from './GraphqlEditor';\r\n\r\nconst { Option, OptGroup } = Select;\r\nconst { TreeNode } = TreeSelect;\r\nconst { Panel } = Collapse;\r\nenum Size {\r\n  SMALL,\r\n  MIDDLE,\r\n  LARGE,\r\n}\r\n// xs\t<576\r\n// sm\t≥576\r\n// md\t≥768\r\n// lg\t≥992\r\n// xl\t≥1200\r\n// xxl ≥1600\r\nconst getFormItemCol = (width: number) => {\r\n  const col = { labelCol: { span: 24 }, wrapperCol: { span: 24 } };\r\n  // if (width >= 256) {\r\n  //   col.labelCol.span = 10;\r\n  //   col.wrapperCol.span = 14;\r\n  // }\r\n  return col;\r\n};\r\nconst getCol = (width: number, size: Size) => {\r\n  const col = { span: 24 };\r\n  if (size === Size.LARGE) {\r\n    return col;\r\n  } else if (size === Size.MIDDLE) {\r\n    if (width >= 576 && width < 1200) {\r\n      col.span = 8;\r\n      return col;\r\n    } else if (width >= 1200) {\r\n      col.span = 6;\r\n      return col;\r\n    }\r\n    return col;\r\n  } else if (size === Size.SMALL) {\r\n    if (width > 256 && width < 576) {\r\n      col.span = 12;\r\n      return col;\r\n    } else if (width >= 576 && width < 1200) {\r\n      col.span = 6;\r\n      return col;\r\n    } else if (width >= 1200) {\r\n      col.span = 4;\r\n      return col;\r\n    }\r\n    return col;\r\n  }\r\n};\r\nexport interface ItemSettingProps {\r\n  /**\r\n   * 分组组件\r\n   */\r\n  componentGroup: (ComponentGroup | ComponentType)[];\r\n  /**\r\n   * 平铺组件方便查找属性\r\n   */\r\n  flatComponents: { [id: string]: ComponentType };\r\n  /**\r\n   * item类型\r\n   * @param id id\r\n   */\r\n  onItemTypeChange(id: string);\r\n  /**\r\n   * item的属性改变\r\n   * @param field 字段\r\n   * @param value 值\r\n   */\r\n  onItemPropsChange(field: string, value: any);\r\n}\r\nexport interface ItemSettingFormProps\r\n  extends FormComponentProps,\r\n    ItemSettingProps {\r\n  /**\r\n   * 编辑中数据，用于初始化值\r\n   */\r\n  item: FPBItem;\r\n  components: ComponentType[];\r\n  /**\r\n   * 初始计数器\r\n   */\r\n  initialKeyCounter;\r\n}\r\n\r\nconst { create, Item } = Form;\r\n\r\nconst ItemSettingForm: React.SFC<ItemSettingFormProps> = props => {\r\n  const { form, item, onItemPropsChange } = props;\r\n  console.log('ItemSettingForm', toJS(props, { recurseEverything: true }));\r\n  const [keyCounter, setKeyCounter] = useState(() => props.initialKeyCounter);\r\n  const recordItem = useRef(item);\r\n  useEffect(() => {\r\n    if (recordItem.current !== item) {\r\n      form.resetFields();\r\n      recordItem.current = item;\r\n    }\r\n  }, [item]);\r\n  useEffect(() => {\r\n    //临时解决方案\r\n    setTimeout(\r\n      () =>\r\n        Object.keys(keyCounter).length &&\r\n        form.getFieldsValue().componentProps &&\r\n        form.setFieldsValue({\r\n          componentProps: form.getFieldsValue().componentProps,\r\n        }),\r\n      500,\r\n    );\r\n  }, [keyCounter]);\r\n\r\n  const initialValue: FPBItem | { [key: string]: any } = item || {};\r\n  const { getFieldDecorator, getFieldsValue, getFieldValue } = form;\r\n  const renderTypeTreeNode = component => {\r\n    if (component.children) {\r\n      return (\r\n        <TreeNode\r\n          value={component.id}\r\n          title={component.label}\r\n          key={component.id}\r\n        >\r\n          {component.children.map(component => {\r\n            return renderTypeTreeNode(component);\r\n          })}\r\n        </TreeNode>\r\n      );\r\n    }\r\n    return (\r\n      <TreeNode\r\n        value={component.id}\r\n        title={component.label}\r\n        key={component.id}\r\n      />\r\n    );\r\n  };\r\n  //组件类型\r\n  const componentTypeDec = getFieldDecorator('componentId', {\r\n    initialValue: initialValue.componentId,\r\n    //preserve: true\r\n  });\r\n  /**\r\n   * 自适应高度\r\n   */\r\n  const autoHeightDec = getFieldDecorator('autoHeight', {\r\n    valuePropName: 'checked',\r\n    initialValue: initialValue.autoHeight,\r\n    //preserve: true\r\n  });\r\n  /**\r\n   * 是否作为表单域\r\n   */\r\n  const isFormFieldDec = getFieldDecorator('isFormField', {\r\n    valuePropName: 'checked',\r\n    initialValue: initialValue.isFormField,\r\n    //preserve: true\r\n  });\r\n  /**\r\n   * 是否作为表单域id\r\n   */\r\n  const $idDec = getFieldDecorator('$id', {\r\n    initialValue: initialValue.$id,\r\n    //preserve: true\r\n  });\r\n  /**\r\n   * 是否作为表单域label\r\n   */\r\n  const labelDec = getFieldDecorator('label', {\r\n    initialValue: initialValue.label,\r\n    //preserve: true\r\n  });\r\n  const { componentId, isFormField } = getFieldsValue();\r\n  // console.log(props.flatComponents[componentId]);\r\n  const { componentProps = {}, formField } =\r\n    props.flatComponents[componentId] || {};\r\n  const sortProps = ({ destination, source }) => {\r\n    if (!destination) {\r\n      return;\r\n    }\r\n    const values = form.getFieldsValue();\r\n    const arr = get(values, destination.droppableId);\r\n    const dragValue = arr[source.index];\r\n    arr.splice(source.index, 1);\r\n    arr.splice(destination.index, 0, dragValue);\r\n    form.setFieldsValue({\r\n      componentProps: values.componentProps,\r\n    });\r\n  };\r\n  const deleteProp = (propName, index) => {\r\n    const values = getFieldsValue();\r\n    const arr = get(values, propName);\r\n    arr.splice(index, 1);\r\n    keyCounter[propName].splice(index, 1);\r\n    form.setFieldsValue({\r\n      componentProps: values.componentProps,\r\n    });\r\n    setKeyCounter({ ...keyCounter });\r\n  };\r\n  const createComponentPropsForm = (\r\n    componentProps: ComponentProps,\r\n    prefix = 'componentProps',\r\n  ) => {\r\n    const componentPropsEntries = Object.entries(componentProps);\r\n    return [\r\n      ...componentPropsEntries\r\n        .filter(([, prop]) => prop.type.indexOf('array') < 0)\r\n        .map(([name, prop], i) => {\r\n          let setting;\r\n          const propName = `${prefix}.${name}`;\r\n          const options = {\r\n            rules: prop.rules,\r\n          };\r\n          if (prop.type === 'string') {\r\n            setting = (\r\n              <Item label={prop.label} key={propName}>\r\n                {getFieldDecorator(propName, {\r\n                  initialValue: get(item, propName),\r\n                  ...options,\r\n                  //preserve: true\r\n                })(<CommonInput />)}\r\n              </Item>\r\n            );\r\n          } else if (prop.type === 'FPR') {\r\n            // console.log('FPR', get(item, propName));\r\n\r\n            setting = (\r\n              <Item label={prop.label} key={propName}>\r\n                {getFieldDecorator(propName, {\r\n                  initialValue: toJS(get(item, propName), {\r\n                    recurseEverything: true,\r\n                  }),\r\n                  ...options,\r\n                  //preserve: true\r\n                })(<FPBForm components={props.components} />)}\r\n              </Item>\r\n            );\r\n          } else if (prop.type === 'graphql') {\r\n            setting = (\r\n              <Item label={prop.label} key={propName}>\r\n                {getFieldDecorator(propName, {\r\n                  initialValue: get(item, propName),\r\n                  ...options,\r\n                  //preserve: true\r\n                })(<GraphqlEditor />)}\r\n              </Item>\r\n            );\r\n          }\r\n\r\n          return setting;\r\n        }),\r\n      <Collapse key={`settings`} accordion destroyInactivePanel={false}>\r\n        {componentPropsEntries\r\n          .filter(([, prop]) => prop.type.indexOf('array') >= 0)\r\n          .map(([name, prop], i) => {\r\n            let setting;\r\n            const propName = `${prefix}.${name}`;\r\n            let mapedArr;\r\n            mapedArr = keyCounter[propName] || [];\r\n            setting = (\r\n              <Panel forceRender header={prop.label} key={`setting${i}`}>\r\n                <Button\r\n                  icon=\"plus\"\r\n                  onClick={e => {\r\n                    const props = get(item, prefix) || {};\r\n                    if (!props[name]) {\r\n                      //没有则默认设置为空数组并默认添加一个\r\n                      keyCounter[propName] = [{}];\r\n                      setKeyCounter({ ...keyCounter });\r\n                      return;\r\n                    }\r\n                    //这里是有shouldHaveOne的情况，只走这里\r\n                    if (!keyCounter[propName]) {\r\n                      keyCounter[propName] = [];\r\n                    }\r\n                    keyCounter[propName].push({});\r\n                    setKeyCounter({ ...keyCounter });\r\n                  }}\r\n                >\r\n                  添加{prop.label}\r\n                </Button>\r\n                {(prop.type === 'array:component' && (\r\n                  <DragDropContext onDragEnd={sortProps}>\r\n                    <Droppable droppableId={propName}>\r\n                      {provided => {\r\n                        return (\r\n                          <div\r\n                            {...provided.droppableProps}\r\n                            ref={provided.innerRef}\r\n                          >\r\n                            {mapedArr.map((p, pi) => {\r\n                              const key = `${propName}[${pi}]`;\r\n\r\n                              return (\r\n                                <Draggable\r\n                                  key={key}\r\n                                  draggableId={key}\r\n                                  index={pi}\r\n                                >\r\n                                  {provided => {\r\n                                    return (\r\n                                      <div\r\n                                        key={key}\r\n                                        ref={provided.innerRef}\r\n                                        {...provided.draggableProps}\r\n                                        // className=\"ant-form ant-form-inline\"\r\n                                      >\r\n                                        <Card\r\n                                          style={{ margin: `5px 0` }}\r\n                                          key={`car${pi}`}\r\n                                          actions={[\r\n                                            <div {...provided.dragHandleProps}>\r\n                                              <Icon type=\"drag\" key={'drag'} />\r\n                                            </div>,\r\n                                            <Icon\r\n                                              type=\"delete\"\r\n                                              key={'delete'}\r\n                                              onClick={_ =>\r\n                                                deleteProp(propName, pi)\r\n                                              }\r\n                                            />,\r\n                                          ]}\r\n                                        >\r\n                                          {createComponentPropsForm(\r\n                                            componentProps[name].componentProps,\r\n                                            `${propName}[${pi}].componentProps`,\r\n                                          )}\r\n                                        </Card>\r\n                                      </div>\r\n                                    );\r\n                                  }}\r\n                                </Draggable>\r\n                              );\r\n                            })}\r\n                            {provided.placeholder}\r\n                          </div>\r\n                        );\r\n                      }}\r\n                    </Droppable>\r\n                  </DragDropContext>\r\n                )) ||\r\n                  (prop.type === 'array:string' && (\r\n                    <DragDropContext onDragEnd={sortProps}>\r\n                      <Droppable droppableId={propName}>\r\n                        {provided => {\r\n                          return (\r\n                            <div\r\n                              {...provided.droppableProps}\r\n                              ref={provided.innerRef}\r\n                            >\r\n                              {mapedArr.map((p, pi) => {\r\n                                const key = `${propName}[${pi}]`;\r\n                                // console.log(key);\r\n                                return (\r\n                                  <Draggable\r\n                                    key={key}\r\n                                    draggableId={key}\r\n                                    index={pi}\r\n                                  >\r\n                                    {provided => {\r\n                                      return (\r\n                                        <div\r\n                                          key={key}\r\n                                          ref={provided.innerRef}\r\n                                          {...provided.draggableProps}\r\n                                          className=\"ant-form ant-form-inline\"\r\n                                        >\r\n                                          <Item>\r\n                                            <div {...provided.dragHandleProps}>\r\n                                              <Icon type=\"drag\" />\r\n                                            </div>\r\n                                          </Item>\r\n                                          <Item>\r\n                                            {getFieldDecorator(key, {\r\n                                              //preserve: true,\r\n                                              initialValue: get(item, key),\r\n                                            })(<CommonInput />)}\r\n                                          </Item>\r\n                                          <Item>\r\n                                            <Icon\r\n                                              onClick={_ =>\r\n                                                deleteProp(propName, pi)\r\n                                              }\r\n                                              type=\"delete\"\r\n                                              style={{\r\n                                                color: `red`,\r\n                                                cursor: `pointer`,\r\n                                              }}\r\n                                            />\r\n                                          </Item>\r\n                                        </div>\r\n                                      );\r\n                                    }}\r\n                                  </Draggable>\r\n                                );\r\n                              })}\r\n                              {provided.placeholder}\r\n                            </div>\r\n                          );\r\n                        }}\r\n                      </Droppable>\r\n                    </DragDropContext>\r\n                  ))}\r\n              </Panel>\r\n            );\r\n\r\n            return setting;\r\n          })}\r\n      </Collapse>,\r\n    ];\r\n  };\r\n\r\n  const propsDecModels = createComponentPropsForm(componentProps);\r\n\r\n  const [settingForm] = useSizeMe(size => {\r\n    const { width } = size;\r\n    return (\r\n      <Form {...getFormItemCol(width)}>\r\n        <Collapse\r\n          accordion\r\n          defaultActiveKey={['1']}\r\n          destroyInactivePanel={false}\r\n        >\r\n          <Panel forceRender header={`基础设置`} key=\"1\">\r\n            <Row gutter={15}>\r\n              <Col {...getCol(width, Size.MIDDLE)}>\r\n                <Item label={'组件'}>\r\n                  {componentTypeDec(\r\n                    <TreeSelect\r\n                      onChange={_ => setKeyCounter({})}\r\n                      showSearch\r\n                      style={{ width: `100%` }}\r\n                      dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\r\n                      placeholder=\"请选择组件\"\r\n                      allowClear\r\n                      autoClearSearchValue\r\n                      treeDefaultExpandAll\r\n                    >\r\n                      {props.componentGroup.map((groupOrComponent, index) => {\r\n                        if (groupOrComponent.id) {\r\n                          return renderTypeTreeNode(groupOrComponent);\r\n                        }\r\n                        return (\r\n                          <TreeNode\r\n                            disabled\r\n                            value={groupOrComponent['groupName']}\r\n                            title={groupOrComponent['groupName']}\r\n                            key={groupOrComponent['groupName']}\r\n                          >\r\n                            {groupOrComponent[\r\n                              groupOrComponent['groupName']\r\n                            ].map(component => {\r\n                              return renderTypeTreeNode(component);\r\n                            })}\r\n                          </TreeNode>\r\n                        );\r\n                      })}\r\n                    </TreeSelect>,\r\n                  )}\r\n                </Item>\r\n              </Col>\r\n              <Col {...getCol(width, Size.SMALL)}>\r\n                <Item\r\n                  label={\r\n                    <span>\r\n                      自适应高度&nbsp;\r\n                      <Tooltip title=\"开启后区块将自适应内容高度，不能进行纵向resize操作\">\r\n                        <Icon type=\"question-circle-o\" />\r\n                      </Tooltip>\r\n                    </span>\r\n                  }\r\n                >\r\n                  {autoHeightDec(\r\n                    <Switch checkedChildren={'开'} unCheckedChildren={'关'} />,\r\n                  )}\r\n                </Item>\r\n              </Col>\r\n\r\n              {formField && (\r\n                <Fragment key=\"frag\">\r\n                  <Col {...getCol(width, Size.SMALL)}>\r\n                    <Item label={'是否作为表单域'}>\r\n                      {isFormFieldDec(\r\n                        <Switch\r\n                          checkedChildren={'是'}\r\n                          unCheckedChildren={'否'}\r\n                        />,\r\n                      )}\r\n                    </Item>\r\n                  </Col>\r\n                  {isFormField && (\r\n                    <>\r\n                      <Col {...getCol(width, Size.MIDDLE)}>\r\n                        <Item\r\n                          label={\r\n                            <span>\r\n                              id&nbsp;\r\n                              <Tooltip title=\"表单域传值字段，不填写默认为区块id，需保证唯一\">\r\n                                <Icon type=\"question-circle-o\" />\r\n                              </Tooltip>\r\n                            </span>\r\n                          }\r\n                        >\r\n                          {$idDec(<CommonInput placeholder={'请填写id'} />)}\r\n                        </Item>\r\n                      </Col>\r\n                      <Col {...getCol(width, Size.MIDDLE)}>\r\n                        <Item label={<span>label</span>}>\r\n                          {labelDec(<CommonInput placeholder={''} />)}\r\n                        </Item>\r\n                      </Col>\r\n                    </>\r\n                  )}\r\n                </Fragment>\r\n              )}\r\n              {/* <Col></Col> */}\r\n            </Row>\r\n          </Panel>\r\n          {propsDecModels.length && (\r\n            <Panel forceRender header={'自定义设置'} key=\"2\">\r\n              {propsDecModels}\r\n            </Panel>\r\n          )}\r\n        </Collapse>\r\n      </Form>\r\n    );\r\n  }, {});\r\n  return <>{settingForm}</>;\r\n};\r\nexport default create<ItemSettingFormProps>({\r\n  onValuesChange(props, changedValues, allValues) {\r\n    const field = Object.keys(changedValues)[0];\r\n    if (!field) {\r\n      return;\r\n    }\r\n    const value = changedValues[field];\r\n    console.log('onValuesChange', field, allValues[field]);\r\n    if (field === 'componentId') {\r\n      props.onItemTypeChange(value);\r\n    } else {\r\n      props.onItemPropsChange(field, allValues[field]);\r\n    }\r\n  },\r\n  onFieldsChange(props, fields) {},\r\n})(ItemSettingForm);\r\n"],"file":"ItemSettingForm.js"}