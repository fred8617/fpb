{"version":3,"file":"ItemSettingForm.js","names":["Option","OptGroup","TreeNode","Panel","Size","getFormItemCol","width","col","labelCol","span","wrapperCol","getCol","size","LARGE","MIDDLE","SMALL","create","Item","ItemSettingForm","observer","props","form","item","useState","initialKeyCounter","keyCounter","setKeyCounter","recordItem","useRef","useEffect","current","resetFields","getFieldsValue","componentProps","Object","keys","length","setFieldsValue","initialValue","toJS","recurseEverything","getFieldDecorator","getFieldValue","renderTypeTreeNode","component","children","id","label","map","componentTypeDec","componentId","autoHeightDec","valuePropName","autoHeight","isFormFieldDec","isFormField","$idDec","$id","labelDec","flatComponents","formField","sortProps","destination","source","values","arr","droppableId","dragValue","index","splice","deleteProp","propName","createComponentPropsForm","prefix","componentPropsEntries","entries","filter","prop","type","indexOf","i","name","setting","options","rules","components","mapedArr","renderAfterAddButtonComponent","provided","droppableProps","innerRef","p","pi","key","draggableProps","margin","dragHandleProps","_","placeholder","color","cursor","e","push","propsDecModels","parentStore","settingWidth","maxHeight","overflow","componentGroup","groupOrComponent","displayName","React","memo","onValuesChange","changedValues","allValues","field","value","onItemTypeChange","onItemPropsChange","onFieldsChange","fields"],"sources":["../src/fpb/ItemSettingForm.tsx"],"sourcesContent":["import {\n  Form,\n  Select,\n  TreeSelect,\n  Input,\n  Switch,\n  Tooltip,\n  Icon,\n  Button,\n  Radio,\n  Collapse,\n  Row,\n  Col,\n  Divider,\n  Card,\n  Spin,\n} from 'antd';\nimport { FormComponentProps } from 'antd/lib/form';\nimport {\n  ComponentGroup,\n  ComponentType,\n  FPBItem,\n  ComponentProps,\n} from './useFPBStore';\nimport React, { useState, useEffect, Fragment, useRef } from 'react';\nimport { get } from 'lodash';\nimport CommonInput from './CommonInput';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport useSizeMe from './useSizeMe';\nimport { toJS } from 'mobx';\nimport { getObjectKeysWhenIsArray } from './utils';\nimport FPBForm from './FPBForm';\nimport GraphqlEditor from './GraphqlEditor';\nimport { observer, Observer } from 'mobx-react-lite';\n\nconst { Option, OptGroup } = Select;\nconst { TreeNode } = TreeSelect;\nconst { Panel } = Collapse;\nenum Size {\n  SMALL,\n  MIDDLE,\n  LARGE,\n}\n// xs\t<576\n// sm\t≥576\n// md\t≥768\n// lg\t≥992\n// xl\t≥1200\n// xxl ≥1600\nconst getFormItemCol = (width: number) => {\n  const col = { labelCol: { span: 24 }, wrapperCol: { span: 24 } };\n  // if (width >= 256) {\n  //   col.labelCol.span = 10;\n  //   col.wrapperCol.span = 14;\n  // }\n  return col;\n};\nconst getCol = (width: number, size: Size) => {\n  const col = { span: 24 };\n  if (size === Size.LARGE) {\n    return col;\n  } else if (size === Size.MIDDLE) {\n    if (width >= 576 && width < 1200) {\n      col.span = 8;\n      return col;\n    } else if (width >= 1200) {\n      col.span = 6;\n      return col;\n    }\n    return col;\n  } else if (size === Size.SMALL) {\n    if (width > 256 && width < 576) {\n      col.span = 12;\n      return col;\n    } else if (width >= 576 && width < 1200) {\n      col.span = 6;\n      return col;\n    } else if (width >= 1200) {\n      col.span = 4;\n      return col;\n    }\n    return col;\n  }\n};\nexport interface ItemSettingProps {\n  /**\n   * 分组组件\n   */\n  componentGroup: (ComponentGroup | ComponentType)[];\n  /**\n   * 平铺组件方便查找属性\n   */\n  flatComponents: { [id: string]: ComponentType };\n  /**\n   * item类型\n   * @param id id\n   */\n  onItemTypeChange(id: string);\n  /**\n   * item的属性改变\n   * @param field 字段\n   * @param value 值\n   */\n  onItemPropsChange(field: string, value: any);\n}\nexport interface ItemSettingFormProps\n  extends FormComponentProps,\n    ItemSettingProps {\n  /**\n   * 编辑中数据，用于初始化值\n   */\n  item: FPBItem;\n  parentStore: any;\n  components: ComponentType[];\n  /**\n   * 初始计数器\n   */\n  initialKeyCounter;\n}\n\nconst { create, Item } = Form;\n\nconst ItemSettingForm: React.SFC<ItemSettingFormProps> = observer(props => {\n  // const [render, setRender] = useState(false);\n  const { form, item } = props;\n  console.log('ItemSettingForm', toJS(props));\n  const [keyCounter, setKeyCounter] = useState(() => props.initialKeyCounter);\n  const recordItem = useRef(item);\n  // useEffect(() => {\n  //   setTimeout(() => setRender(true), 300);\n  // }, []);\n  useEffect(() => {\n    if (recordItem.current !== item) {\n      form.resetFields();\n      recordItem.current = item;\n    }\n  }, [item]);\n  useEffect(() => {\n    // if (!render) {\n    //   return;\n    // }\n    //临时解决方案\n    const { componentProps } = form.getFieldsValue();\n    Object.keys(keyCounter).length &&\n      componentProps &&\n      form.setFieldsValue({\n        componentProps,\n      });\n  }, [keyCounter]);\n\n  const initialValue: FPBItem | { [key: string]: any } =\n    toJS(item, { recurseEverything: true }) || {};\n  const { getFieldDecorator, getFieldsValue, getFieldValue } = form;\n  const renderTypeTreeNode = component => {\n    if (component.children) {\n      return (\n        <TreeNode\n          value={component.id}\n          title={component.label}\n          key={component.id}\n        >\n          {component.children.map(component => {\n            return renderTypeTreeNode(component);\n          })}\n        </TreeNode>\n      );\n    }\n    return (\n      <TreeNode\n        value={component.id}\n        title={component.label}\n        key={component.id}\n      />\n    );\n  };\n  // const [settingForm] = useSizeMe(size => {\n  //   const { width } = size;\n  //   return (\n  //     <>\n  //       <div></div>\n  //       {width && render&&(\n\n  //       )}\n  //     </>\n  //   );\n  // }, {});\n  // if (!render) {\n  //   return <>{/* <Spin spinning={true}/> */}</>;\n  // }\n  //组件类型\n  const componentTypeDec = getFieldDecorator('componentId', {\n    initialValue: initialValue.componentId,\n    //preserve: true\n  });\n  /**\n   * 自适应高度\n   */\n  const autoHeightDec = getFieldDecorator('autoHeight', {\n    valuePropName: 'checked',\n    initialValue: initialValue.autoHeight,\n    //preserve: true\n  });\n  /**\n   * 是否作为表单域\n   */\n  const isFormFieldDec = getFieldDecorator('isFormField', {\n    valuePropName: 'checked',\n    initialValue: initialValue.isFormField,\n    //preserve: true\n  });\n  /**\n   * 是否作为表单域id\n   */\n  const $idDec = getFieldDecorator('$id', {\n    initialValue: initialValue.$id,\n    //preserve: true\n  });\n  /**\n   * 是否作为表单域label\n   */\n  const labelDec = getFieldDecorator('label', {\n    initialValue: initialValue.label,\n    //preserve: true\n  });\n  const { componentId, isFormField } = getFieldsValue();\n  // console.log(props.flatComponents[componentId]);\n  const { componentProps = {}, formField } =\n    props.flatComponents[componentId] || {};\n  const sortProps = ({ destination, source }) => {\n    if (!destination) {\n      return;\n    }\n    const values = form.getFieldsValue();\n    const arr = get(values, destination.droppableId);\n    const dragValue = arr[source.index];\n    arr.splice(source.index, 1);\n    arr.splice(destination.index, 0, dragValue);\n    form.setFieldsValue({\n      componentProps: values.componentProps,\n    });\n  };\n  const deleteProp = (propName, index) => {\n    const values = getFieldsValue();\n    const arr = get(values, propName);\n    arr.splice(index, 1);\n    keyCounter[propName].splice(index, 1);\n    form.setFieldsValue({\n      componentProps: values.componentProps,\n    });\n    setKeyCounter({ ...keyCounter });\n  };\n  const createComponentPropsForm = (\n    componentProps: ComponentProps,\n    prefix = 'componentProps',\n  ) => {\n    const componentPropsEntries = Object.entries(componentProps);\n    return [\n      ...componentPropsEntries\n        .filter(([, prop]) => prop.type.indexOf('array') < 0)\n        .map(([name, prop], i) => {\n          let setting;\n          const propName = `${prefix}.${name}`;\n          const options = {\n            rules: prop.rules,\n          };\n          if (prop.type === 'string') {\n            setting = (\n              <Item label={prop.label} key={propName}>\n                {getFieldDecorator(propName, {\n                  initialValue: get(initialValue, propName),\n                  ...options,\n                  //preserve: true\n                })(<CommonInput />)}\n              </Item>\n            );\n          } else if (prop.type === 'FPR') {\n            // console.log('FPR', get(initialValue, propName));\n\n            setting = (\n              <Item label={prop.label} key={propName}>\n                {getFieldDecorator(propName, {\n                  initialValue: toJS(get(initialValue, propName), {\n                    recurseEverything: true,\n                  }),\n                  ...options,\n                  //preserve: true\n                })(<FPBForm components={props.components} />)}\n              </Item>\n            );\n          } else if (prop.type === 'graphql') {\n            setting = (\n              <Item label={prop.label} key={propName}>\n                {getFieldDecorator(propName, {\n                  initialValue: get(initialValue, propName),\n                  ...options,\n                  //preserve: true\n                })(<GraphqlEditor />)}\n              </Item>\n            );\n          }\n\n          return setting;\n        }),\n      <Collapse key={`settings`} accordion destroyInactivePanel={false}>\n        {componentPropsEntries\n          .filter(([, prop]) => prop.type.indexOf('array') >= 0)\n          .map(([name, prop], i) => {\n            let setting;\n            const propName = `${prefix}.${name}`;\n            let mapedArr;\n            mapedArr = keyCounter[propName] || [];\n            let renderAfterAddButtonComponent;\n            if (prop.type === 'array:component') {\n              renderAfterAddButtonComponent = (\n                <DragDropContext onDragEnd={sortProps}>\n                  <Droppable droppableId={propName}>\n                    {provided => {\n                      return (\n                        <div\n                          {...provided.droppableProps}\n                          ref={provided.innerRef}\n                        >\n                          {mapedArr.map((p, pi) => {\n                            const key = `${propName}[${pi}]`;\n                            return (\n                              <Draggable key={key} draggableId={key} index={pi}>\n                                {provided => {\n                                  return (\n                                    <div\n                                      key={key}\n                                      ref={provided.innerRef}\n                                      {...provided.draggableProps}\n                                      // className=\"ant-form ant-form-inline\"\n                                    >\n                                      <Card\n                                        style={{ margin: `5px 0` }}\n                                        key={`car${pi}`}\n                                        actions={[\n                                          <div {...provided.dragHandleProps}>\n                                            <Icon type=\"drag\" key={'drag'} />\n                                          </div>,\n                                          <Icon\n                                            type=\"delete\"\n                                            key={'delete'}\n                                            onClick={_ =>\n                                              deleteProp(propName, pi)\n                                            }\n                                          />,\n                                        ]}\n                                      >\n                                        {createComponentPropsForm(\n                                          componentProps[name].componentProps,\n                                          `${propName}[${pi}].componentProps`,\n                                        )}\n                                      </Card>\n                                    </div>\n                                  );\n                                }}\n                              </Draggable>\n                            );\n                          })}\n                          {provided.placeholder}\n                        </div>\n                      );\n                    }}\n                  </Droppable>\n                </DragDropContext>\n              );\n            } else if (prop.type === 'array:string') {\n              renderAfterAddButtonComponent = (\n                <DragDropContext onDragEnd={sortProps}>\n                  <Droppable droppableId={propName}>\n                    {provided => {\n                      return (\n                        <div\n                          {...provided.droppableProps}\n                          ref={provided.innerRef}\n                        >\n                          {mapedArr.map((p, pi) => {\n                            const key = `${propName}[${pi}]`;\n                            debugger;\n                            return (\n                              <Draggable key={key} draggableId={key} index={pi}>\n                                {provided => {\n                                  return (\n                                    <div\n                                      key={key}\n                                      ref={provided.innerRef}\n                                      {...provided.draggableProps}\n                                      className=\"ant-form ant-form-inline\"\n                                    >\n                                      <Item>\n                                        <div {...provided.dragHandleProps}>\n                                          <Icon type=\"drag\" />\n                                        </div>\n                                      </Item>\n                                      <Item>\n                                        {getFieldDecorator(key, {\n                                          //preserve: true,\n                                          initialValue: get(item, key),\n                                        })(<CommonInput />)}\n                                      </Item>\n                                      <Item>\n                                        <Icon\n                                          onClick={_ =>\n                                            deleteProp(propName, pi)\n                                          }\n                                          type=\"delete\"\n                                          style={{\n                                            color: `red`,\n                                            cursor: `pointer`,\n                                          }}\n                                        />\n                                      </Item>\n                                    </div>\n                                  );\n                                }}\n                              </Draggable>\n                            );\n                          })}\n                          {provided.placeholder}\n                        </div>\n                      );\n                    }}\n                  </Droppable>\n                </DragDropContext>\n              );\n            }\n            setting = (\n              <Panel forceRender header={prop.label} key={`setting${i}`}>\n                <Button\n                  icon=\"plus\"\n                  onClick={e => {\n                    const props = get(item, prefix) || {};\n                    if (!props[name]) {\n                      //没有则默认设置为空数组并默认添加一个\n                      keyCounter[propName] = [{}];\n                      setKeyCounter({ ...keyCounter });\n                      return;\n                    }\n                    //这里是有shouldHaveOne的情况，只走这里\n                    if (!keyCounter[propName]) {\n                      keyCounter[propName] = [];\n                    }\n                    keyCounter[propName].push({});\n                    setKeyCounter({ ...keyCounter });\n                  }}\n                >\n                  添加{prop.label}\n                </Button>\n                {renderAfterAddButtonComponent}\n              </Panel>\n            );\n\n            return setting;\n          })}\n      </Collapse>,\n    ];\n  };\n\n  const propsDecModels = createComponentPropsForm(componentProps);\n\n  return (\n    <Observer>\n      {() =>{\n        return <>\n        <Form {...getFormItemCol(props.parentStore.settingWidth)}>\n          <Collapse\n            accordion\n            defaultActiveKey={['1']}\n            destroyInactivePanel={false}\n          >\n            <Panel forceRender header={`基础设置`} key=\"1\">\n              <Row gutter={15}>\n                <Col {...getCol(props.parentStore.settingWidth, Size.MIDDLE)}>\n                  <Item label={'组件'}>\n                    {componentTypeDec(\n                      <TreeSelect\n                        onChange={_ => setKeyCounter({})}\n                        showSearch\n                        style={{ width: `100%` }}\n                        dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                        placeholder=\"请选择组件\"\n                        allowClear\n                        autoClearSearchValue\n                        treeDefaultExpandAll\n                      >\n                        {props.componentGroup.map(\n                          (groupOrComponent, index) => {\n                            if (groupOrComponent.id) {\n                              return renderTypeTreeNode(groupOrComponent);\n                            }\n                            return (\n                              <TreeNode\n                                disabled\n                                value={groupOrComponent['groupName']}\n                                title={groupOrComponent['groupName']}\n                                key={groupOrComponent['groupName']}\n                              >\n                                {groupOrComponent[\n                                  groupOrComponent['groupName']\n                                ].map(component => {\n                                  return renderTypeTreeNode(component);\n                                })}\n                              </TreeNode>\n                            );\n                          },\n                        )}\n                      </TreeSelect>,\n                    )}\n                  </Item>\n                </Col>\n                <Col {...getCol(props.parentStore.settingWidth, Size.SMALL)}>\n                  <Item\n                    label={\n                      <span>\n                        自适应高度&nbsp;\n                        <Tooltip title=\"开启后区块将自适应内容高度，不能进行纵向resize操作\">\n                          <Icon type=\"question-circle-o\" />\n                        </Tooltip>\n                      </span>\n                    }\n                  >\n                    {autoHeightDec(\n                      <Switch\n                        checkedChildren={'开'}\n                        unCheckedChildren={'关'}\n                      />,\n                    )}\n                  </Item>\n                </Col>\n\n                {formField && (\n                  <Fragment key=\"frag\">\n                    <Col {...getCol(props.parentStore.settingWidth, Size.SMALL)}>\n                      <Item label={'是否作为表单域'}>\n                        {isFormFieldDec(\n                          <Switch\n                            checkedChildren={'是'}\n                            unCheckedChildren={'否'}\n                          />,\n                        )}\n                      </Item>\n                    </Col>\n                    {isFormField && (\n                      <>\n                        <Col\n                          {...getCol(props.parentStore.settingWidth, Size.MIDDLE)}\n                        >\n                          <Item\n                            label={\n                              <span>\n                                id&nbsp;\n                                <Tooltip title=\"表单域传值字段，不填写默认为区块id，需保证唯一\">\n                                  <Icon type=\"question-circle-o\" />\n                                </Tooltip>\n                              </span>\n                            }\n                          >\n                            {$idDec(<CommonInput placeholder={'请填写id'} />)}\n                          </Item>\n                        </Col>\n                        <Col\n                          {...getCol(props.parentStore.settingWidth, Size.MIDDLE)}\n                        >\n                          <Item label={<span>label</span>}>\n                            {labelDec(<CommonInput placeholder={''} />)}\n                          </Item>\n                        </Col>\n                      </>\n                    )}\n                  </Fragment>\n                )}\n                {/* <Col></Col> */}\n              </Row>\n            </Panel>\n            {propsDecModels.length && (\n              <Panel forceRender header={'自定义设置'} key=\"2\">\n                {propsDecModels}\n              </Panel>\n            )}\n          </Collapse>\n        </Form>\n      </>\n      }}\n    </Observer>\n  );\n});\nItemSettingForm.displayName = 'ItemSettingFormObserver';\nexport default React.memo(\n  create<ItemSettingFormProps>({\n    onValuesChange(props, changedValues, allValues) {\n      const field = Object.keys(changedValues)[0];\n      if (!field) {\n        return;\n      }\n      const value = changedValues[field];\n      console.log('onValuesChange', field, allValues[field]);\n      if (field === 'componentId') {\n        props.onItemTypeChange(value);\n      } else {\n        props.onItemPropsChange(field, allValues[field]);\n      }\n    },\n    onFieldsChange(props, fields) {},\n  })(ItemSettingForm),\n);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAAqD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAErD,IAAQA,MAAM,mBAANA,MAAM;EAAEC,QAAQ,mBAARA,QAAQ;AACxB,IAAQC,QAAQ,uBAARA,QAAQ;AAChB,IAAQC,KAAK,qBAALA,KAAK;AAAc,IACtBC,IAAI,EAKT;AACA;AACA;AACA;AACA;AACA;AAAA,WAVKA,IAAI;EAAJA,IAAI,CAAJA,IAAI;EAAJA,IAAI,CAAJA,IAAI;EAAJA,IAAI,CAAJA,IAAI;AAAA,GAAJA,IAAI,KAAJA,IAAI;AAWT,IAAMC,cAAc,GAAG,SAAjBA,cAAc,CAAIC,KAAa,EAAK;EACxC,IAAMC,GAAG,GAAG;IAAEC,QAAQ,EAAE;MAAEC,IAAI,EAAE;IAAG,CAAC;IAAEC,UAAU,EAAE;MAAED,IAAI,EAAE;IAAG;EAAE,CAAC;EAChE;EACA;EACA;EACA;EACA,OAAOF,GAAG;AACZ,CAAC;AACD,IAAMI,MAAM,GAAG,SAATA,MAAM,CAAIL,KAAa,EAAEM,IAAU,EAAK;EAC5C,IAAML,GAAG,GAAG;IAAEE,IAAI,EAAE;EAAG,CAAC;EACxB,IAAIG,IAAI,KAAKR,IAAI,CAACS,KAAK,EAAE;IACvB,OAAON,GAAG;EACZ,CAAC,MAAM,IAAIK,IAAI,KAAKR,IAAI,CAACU,MAAM,EAAE;IAC/B,IAAIR,KAAK,IAAI,GAAG,IAAIA,KAAK,GAAG,IAAI,EAAE;MAChCC,GAAG,CAACE,IAAI,GAAG,CAAC;MACZ,OAAOF,GAAG;IACZ,CAAC,MAAM,IAAID,KAAK,IAAI,IAAI,EAAE;MACxBC,GAAG,CAACE,IAAI,GAAG,CAAC;MACZ,OAAOF,GAAG;IACZ;IACA,OAAOA,GAAG;EACZ,CAAC,MAAM,IAAIK,IAAI,KAAKR,IAAI,CAACW,KAAK,EAAE;IAC9B,IAAIT,KAAK,GAAG,GAAG,IAAIA,KAAK,GAAG,GAAG,EAAE;MAC9BC,GAAG,CAACE,IAAI,GAAG,EAAE;MACb,OAAOF,GAAG;IACZ,CAAC,MAAM,IAAID,KAAK,IAAI,GAAG,IAAIA,KAAK,GAAG,IAAI,EAAE;MACvCC,GAAG,CAACE,IAAI,GAAG,CAAC;MACZ,OAAOF,GAAG;IACZ,CAAC,MAAM,IAAID,KAAK,IAAI,IAAI,EAAE;MACxBC,GAAG,CAACE,IAAI,GAAG,CAAC;MACZ,OAAOF,GAAG;IACZ;IACA,OAAOA,GAAG;EACZ;AACF,CAAC;AAqCD,IAAQS,MAAM,iBAANA,MAAM;EAAEC,IAAI,iBAAJA,IAAI;AAEpB,IAAMC,eAAgD,GAAG,IAAAC,uBAAQ,EAAC,UAAAC,KAAK,EAAI;EACzE;EACA,IAAQC,IAAI,GAAWD,KAAK,CAApBC,IAAI;IAAEC,IAAI,GAAKF,KAAK,CAAdE,IAAI;EAElB,gBAAoC,IAAAC,eAAQ,EAAC;MAAA,OAAMH,KAAK,CAACI,iBAAiB;IAAA,EAAC;IAAA;IAApEC,UAAU;IAAEC,aAAa;EAChC,IAAMC,UAAU,GAAG,IAAAC,aAAM,EAACN,IAAI,CAAC;EAC/B;EACA;EACA;EACA,IAAAO,gBAAS,EAAC,YAAM;IACd,IAAIF,UAAU,CAACG,OAAO,KAAKR,IAAI,EAAE;MAC/BD,IAAI,CAACU,WAAW,EAAE;MAClBJ,UAAU,CAACG,OAAO,GAAGR,IAAI;IAC3B;EACF,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EACV,IAAAO,gBAAS,EAAC,YAAM;IACd;IACA;IACA;IACA;IACA,2BAA2BR,IAAI,CAACW,cAAc,EAAE;MAAxCC,cAAc,wBAAdA,cAAc;IACtBC,MAAM,CAACC,IAAI,CAACV,UAAU,CAAC,CAACW,MAAM,IAC5BH,cAAc,IACdZ,IAAI,CAACgB,cAAc,CAAC;MAClBJ,cAAc,EAAdA;IACF,CAAC,CAAC;EACN,CAAC,EAAE,CAACR,UAAU,CAAC,CAAC;EAEhB,IAAMa,YAA8C,GAClD,IAAAC,UAAI,EAACjB,IAAI,EAAE;IAAEkB,iBAAiB,EAAE;EAAK,CAAC,CAAC,IAAI,CAAC,CAAC;EAC/C,IAAQC,iBAAiB,GAAoCpB,IAAI,CAAzDoB,iBAAiB;IAAET,cAAc,GAAoBX,IAAI,CAAtCW,cAAc;IAAEU,aAAa,GAAKrB,IAAI,CAAtBqB,aAAa;EACxD,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkB,CAAGC,SAAS,EAAI;IACtC,IAAIA,SAAS,CAACC,QAAQ,EAAE;MACtB,oBACE,6BAAC,QAAQ;QACP,KAAK,EAAED,SAAS,CAACE,EAAG;QACpB,KAAK,EAAEF,SAAS,CAACG,KAAM;QACvB,GAAG,EAAEH,SAAS,CAACE;MAAG,GAEjBF,SAAS,CAACC,QAAQ,CAACG,GAAG,CAAC,UAAAJ,SAAS,EAAI;QACnC,OAAOD,kBAAkB,CAACC,SAAS,CAAC;MACtC,CAAC,CAAC,CACO;IAEf;IACA,oBACE,6BAAC,QAAQ;MACP,KAAK,EAAEA,SAAS,CAACE,EAAG;MACpB,KAAK,EAAEF,SAAS,CAACG,KAAM;MACvB,GAAG,EAAEH,SAAS,CAACE;IAAG,EAClB;EAEN,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAMG,gBAAgB,GAAGR,iBAAiB,CAAC,aAAa,EAAE;IACxDH,YAAY,EAAEA,YAAY,CAACY;IAC3B;EACF,CAAC,CAAC;EACF;AACF;AACA;EACE,IAAMC,aAAa,GAAGV,iBAAiB,CAAC,YAAY,EAAE;IACpDW,aAAa,EAAE,SAAS;IACxBd,YAAY,EAAEA,YAAY,CAACe;IAC3B;EACF,CAAC,CAAC;EACF;AACF;AACA;EACE,IAAMC,cAAc,GAAGb,iBAAiB,CAAC,aAAa,EAAE;IACtDW,aAAa,EAAE,SAAS;IACxBd,YAAY,EAAEA,YAAY,CAACiB;IAC3B;EACF,CAAC,CAAC;EACF;AACF;AACA;EACE,IAAMC,MAAM,GAAGf,iBAAiB,CAAC,KAAK,EAAE;IACtCH,YAAY,EAAEA,YAAY,CAACmB;IAC3B;EACF,CAAC,CAAC;EACF;AACF;AACA;EACE,IAAMC,QAAQ,GAAGjB,iBAAiB,CAAC,OAAO,EAAE;IAC1CH,YAAY,EAAEA,YAAY,CAACS;IAC3B;EACF,CAAC,CAAC;;EACF,sBAAqCf,cAAc,EAAE;IAA7CkB,WAAW,mBAAXA,WAAW;IAAEK,WAAW,mBAAXA,WAAW;EAChC;EACA,WACEnC,KAAK,CAACuC,cAAc,CAACT,WAAW,CAAC,IAAI,CAAC,CAAC;IAAA,2BADjCjB,cAAc;IAAdA,cAAc,oCAAG,CAAC,CAAC;IAAE2B,SAAS,QAATA,SAAS;EAEtC,IAAMC,SAAS,GAAG,SAAZA,SAAS,QAAgC;IAAA,IAA1BC,WAAW,SAAXA,WAAW;MAAEC,MAAM,SAANA,MAAM;IACtC,IAAI,CAACD,WAAW,EAAE;MAChB;IACF;IACA,IAAME,MAAM,GAAG3C,IAAI,CAACW,cAAc,EAAE;IACpC,IAAMiC,GAAG,GAAG,mBAAID,MAAM,EAAEF,WAAW,CAACI,WAAW,CAAC;IAChD,IAAMC,SAAS,GAAGF,GAAG,CAACF,MAAM,CAACK,KAAK,CAAC;IACnCH,GAAG,CAACI,MAAM,CAACN,MAAM,CAACK,KAAK,EAAE,CAAC,CAAC;IAC3BH,GAAG,CAACI,MAAM,CAACP,WAAW,CAACM,KAAK,EAAE,CAAC,EAAED,SAAS,CAAC;IAC3C9C,IAAI,CAACgB,cAAc,CAAC;MAClBJ,cAAc,EAAE+B,MAAM,CAAC/B;IACzB,CAAC,CAAC;EACJ,CAAC;EACD,IAAMqC,UAAU,GAAG,SAAbA,UAAU,CAAIC,QAAQ,EAAEH,KAAK,EAAK;IACtC,IAAMJ,MAAM,GAAGhC,cAAc,EAAE;IAC/B,IAAMiC,GAAG,GAAG,mBAAID,MAAM,EAAEO,QAAQ,CAAC;IACjCN,GAAG,CAACI,MAAM,CAACD,KAAK,EAAE,CAAC,CAAC;IACpB3C,UAAU,CAAC8C,QAAQ,CAAC,CAACF,MAAM,CAACD,KAAK,EAAE,CAAC,CAAC;IACrC/C,IAAI,CAACgB,cAAc,CAAC;MAClBJ,cAAc,EAAE+B,MAAM,CAAC/B;IACzB,CAAC,CAAC;IACFP,aAAa,mBAAMD,UAAU,EAAG;EAClC,CAAC;EACD,IAAM+C,wBAAwB,GAAG,SAA3BA,wBAAwB,CAC5BvC,cAA8B,EAE3B;IAAA,IADHwC,MAAM,uEAAG,gBAAgB;IAEzB,IAAMC,qBAAqB,GAAGxC,MAAM,CAACyC,OAAO,CAAC1C,cAAc,CAAC;IAC5D,oCACKyC,qBAAqB,CACrBE,MAAM,CAAC;MAAA;QAAIC,IAAI;MAAA,OAAMA,IAAI,CAACC,IAAI,CAACC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC;IAAA,EAAC,CACpD/B,GAAG,CAAC,iBAAegC,CAAC,EAAK;MAAA;QAAnBC,IAAI;QAAEJ,IAAI;MACf,IAAIK,OAAO;MACX,IAAMX,QAAQ,aAAME,MAAM,cAAIQ,IAAI,CAAE;MACpC,IAAME,OAAO,GAAG;QACdC,KAAK,EAAEP,IAAI,CAACO;MACd,CAAC;MACD,IAAIP,IAAI,CAACC,IAAI,KAAK,QAAQ,EAAE;QAC1BI,OAAO,gBACL,6BAAC,IAAI;UAAC,KAAK,EAAEL,IAAI,CAAC9B,KAAM;UAAC,GAAG,EAAEwB;QAAS,GACpC9B,iBAAiB,CAAC8B,QAAQ;UACzBjC,YAAY,EAAE,mBAAIA,YAAY,EAAEiC,QAAQ;QAAC,GACtCY,OAAO,EAEV,eAAC,6BAAC,oBAAW,OAAG,CAAC,CAEtB;MACH,CAAC,MAAM,IAAIN,IAAI,CAACC,IAAI,KAAK,KAAK,EAAE;QAC9B;;QAEAI,OAAO,gBACL,6BAAC,IAAI;UAAC,KAAK,EAAEL,IAAI,CAAC9B,KAAM;UAAC,GAAG,EAAEwB;QAAS,GACpC9B,iBAAiB,CAAC8B,QAAQ;UACzBjC,YAAY,EAAE,IAAAC,UAAI,EAAC,mBAAID,YAAY,EAAEiC,QAAQ,CAAC,EAAE;YAC9C/B,iBAAiB,EAAE;UACrB,CAAC;QAAC,GACC2C,OAAO,EAEV,eAAC,6BAAC,gBAAO;UAAC,UAAU,EAAE/D,KAAK,CAACiE;QAAW,EAAG,CAAC,CAEhD;MACH,CAAC,MAAM,IAAIR,IAAI,CAACC,IAAI,KAAK,SAAS,EAAE;QAClCI,OAAO,gBACL,6BAAC,IAAI;UAAC,KAAK,EAAEL,IAAI,CAAC9B,KAAM;UAAC,GAAG,EAAEwB;QAAS,GACpC9B,iBAAiB,CAAC8B,QAAQ;UACzBjC,YAAY,EAAE,mBAAIA,YAAY,EAAEiC,QAAQ;QAAC,GACtCY,OAAO,EAEV,eAAC,6BAAC,sBAAa,OAAG,CAAC,CAExB;MACH;MAEA,OAAOD,OAAO;IAChB,CAAC,CAAC,iBACJ;MAAU,GAAG,YAAa;MAAC,SAAS;MAAC,oBAAoB,EAAE;IAAM,GAC9DR,qBAAqB,CACnBE,MAAM,CAAC;MAAA;QAAIC,IAAI;MAAA,OAAMA,IAAI,CAACC,IAAI,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC;IAAA,EAAC,CACrD/B,GAAG,CAAC,iBAAegC,CAAC,EAAK;MAAA;QAAnBC,IAAI;QAAEJ,IAAI;MACf,IAAIK,OAAO;MACX,IAAMX,QAAQ,aAAME,MAAM,cAAIQ,IAAI,CAAE;MACpC,IAAIK,QAAQ;MACZA,QAAQ,GAAG7D,UAAU,CAAC8C,QAAQ,CAAC,IAAI,EAAE;MACrC,IAAIgB,6BAA6B;MACjC,IAAIV,IAAI,CAACC,IAAI,KAAK,iBAAiB,EAAE;QACnCS,6BAA6B,gBAC3B,6BAAC,kCAAe;UAAC,SAAS,EAAE1B;QAAU,gBACpC,6BAAC,4BAAS;UAAC,WAAW,EAAEU;QAAS,GAC9B,UAAAiB,QAAQ,EAAI;UACX,oBACE,iDACMA,QAAQ,CAACC,cAAc;YAC3B,GAAG,EAAED,QAAQ,CAACE;UAAS,IAEtBJ,QAAQ,CAACtC,GAAG,CAAC,UAAC2C,CAAC,EAAEC,EAAE,EAAK;YACvB,IAAMC,GAAG,aAAMtB,QAAQ,cAAIqB,EAAE,MAAG;YAChC,oBACE,6BAAC,4BAAS;cAAC,GAAG,EAAEC,GAAI;cAAC,WAAW,EAAEA,GAAI;cAAC,KAAK,EAAED;YAAG,GAC9C,UAAAJ,QAAQ,EAAI;cACX,oBACE;gBACE,GAAG,EAAEK,GAAI;gBACT,GAAG,EAAEL,QAAQ,CAACE;cAAS,GACnBF,QAAQ,CAACM,cAAc,gBAG3B;gBACE,KAAK,EAAE;kBAAEC,MAAM;gBAAU,CAAE;gBAC3B,GAAG,eAAQH,EAAE,CAAG;gBAChB,OAAO,EAAE,cACP,oCAASJ,QAAQ,CAACQ,eAAe,eAC/B;kBAAM,IAAI,EAAC,MAAM;kBAAC,GAAG,EAAE;gBAAO,EAAG,CAC7B,eACN;kBACE,IAAI,EAAC,QAAQ;kBACb,GAAG,EAAE,QAAS;kBACd,OAAO,EAAE,iBAAAC,CAAC;oBAAA,OACR3B,UAAU,CAACC,QAAQ,EAAEqB,EAAE,CAAC;kBAAA;gBACzB,EACD;cACF,GAEDpB,wBAAwB,CACvBvC,cAAc,CAACgD,IAAI,CAAC,CAAChD,cAAc,YAChCsC,QAAQ,cAAIqB,EAAE,sBAClB,CACI,CACH;YAEV,CAAC,CACS;UAEhB,CAAC,CAAC,EACDJ,QAAQ,CAACU,WAAW,CACjB;QAEV,CAAC,CACS,CAEf;MACH,CAAC,MAAM,IAAIrB,IAAI,CAACC,IAAI,KAAK,cAAc,EAAE;QACvCS,6BAA6B,gBAC3B,6BAAC,kCAAe;UAAC,SAAS,EAAE1B;QAAU,gBACpC,6BAAC,4BAAS;UAAC,WAAW,EAAEU;QAAS,GAC9B,UAAAiB,QAAQ,EAAI;UACX,oBACE,iDACMA,QAAQ,CAACC,cAAc;YAC3B,GAAG,EAAED,QAAQ,CAACE;UAAS,IAEtBJ,QAAQ,CAACtC,GAAG,CAAC,UAAC2C,CAAC,EAAEC,EAAE,EAAK;YACvB,IAAMC,GAAG,aAAMtB,QAAQ,cAAIqB,EAAE,MAAG;YAEhC,oBACE,6BAAC,4BAAS;cAAC,GAAG,EAAEC,GAAI;cAAC,WAAW,EAAEA,GAAI;cAAC,KAAK,EAAED;YAAG,GAC9C,UAAAJ,QAAQ,EAAI;cACX,oBACE;gBACE,GAAG,EAAEK,GAAI;gBACT,GAAG,EAAEL,QAAQ,CAACE;cAAS,GACnBF,QAAQ,CAACM,cAAc;gBAC3B,SAAS,EAAC;cAA0B,iBAEpC,6BAAC,IAAI,qBACH,oCAASN,QAAQ,CAACQ,eAAe,eAC/B;gBAAM,IAAI,EAAC;cAAM,EAAG,CAChB,CACD,eACP,6BAAC,IAAI,QACFvD,iBAAiB,CAACoD,GAAG,EAAE;gBACtB;gBACAvD,YAAY,EAAE,mBAAIhB,IAAI,EAAEuE,GAAG;cAC7B,CAAC,CAAC,eAAC,6BAAC,oBAAW,OAAG,CAAC,CACd,eACP,6BAAC,IAAI,qBACH;gBACE,OAAO,EAAE,iBAAAI,CAAC;kBAAA,OACR3B,UAAU,CAACC,QAAQ,EAAEqB,EAAE,CAAC;gBAAA,CACzB;gBACD,IAAI,EAAC,QAAQ;gBACb,KAAK,EAAE;kBACLO,KAAK,OAAO;kBACZC,MAAM;gBACR;cAAE,EACF,CACG,CACH;YAEV,CAAC,CACS;UAEhB,CAAC,CAAC,EACDZ,QAAQ,CAACU,WAAW,CACjB;QAEV,CAAC,CACS,CAEf;MACH;MACAhB,OAAO,gBACL,6BAAC,KAAK;QAAC,WAAW;QAAC,MAAM,EAAEL,IAAI,CAAC9B,KAAM;QAAC,GAAG,mBAAYiC,CAAC;MAAG,gBACxD;QACE,IAAI,EAAC,MAAM;QACX,OAAO,EAAE,iBAAAqB,CAAC,EAAI;UACZ,IAAMjF,KAAK,GAAG,mBAAIE,IAAI,EAAEmD,MAAM,CAAC,IAAI,CAAC,CAAC;UACrC,IAAI,CAACrD,KAAK,CAAC6D,IAAI,CAAC,EAAE;YAChB;YACAxD,UAAU,CAAC8C,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAC3B7C,aAAa,mBAAMD,UAAU,EAAG;YAChC;UACF;UACA;UACA,IAAI,CAACA,UAAU,CAAC8C,QAAQ,CAAC,EAAE;YACzB9C,UAAU,CAAC8C,QAAQ,CAAC,GAAG,EAAE;UAC3B;UACA9C,UAAU,CAAC8C,QAAQ,CAAC,CAAC+B,IAAI,CAAC,CAAC,CAAC,CAAC;UAC7B5E,aAAa,mBAAMD,UAAU,EAAG;QAClC;MAAE,mBAECoD,IAAI,CAAC9B,KAAK,CACN,EACRwC,6BAA6B,CAEjC;MAED,OAAOL,OAAO;IAChB,CAAC,CAAC,CACK;EAEf,CAAC;EAED,IAAMqB,cAAc,GAAG/B,wBAAwB,CAACvC,cAAc,CAAC;EAE/D,oBACE,6BAAC,uBAAQ,QACN,YAAK;IACJ,oBAAO,yEACP,4CAAU5B,cAAc,CAACe,KAAK,CAACoF,WAAW,CAACC,YAAY,CAAC,eACtD;MACE,SAAS;MACT,gBAAgB,EAAE,CAAC,GAAG,CAAE;MACxB,oBAAoB,EAAE;IAAM,gBAE5B,6BAAC,KAAK;MAAC,WAAW;MAAC,MAAM,4BAAS;MAAC,GAAG,EAAC;IAAG,gBACxC;MAAK,MAAM,EAAE;IAAG,gBACd,2CAAS9F,MAAM,CAACS,KAAK,CAACoF,WAAW,CAACC,YAAY,EAAErG,IAAI,CAACU,MAAM,CAAC,eAC1D,6BAAC,IAAI;MAAC,KAAK,EAAE;IAAK,GACfmC,gBAAgB,eACf;MACE,QAAQ,EAAE,kBAAAgD,CAAC;QAAA,OAAIvE,aAAa,CAAC,CAAC,CAAC,CAAC;MAAA,CAAC;MACjC,UAAU;MACV,KAAK,EAAE;QAAEpB,KAAK;MAAS,CAAE;MACzB,aAAa,EAAE;QAAEoG,SAAS,EAAE,GAAG;QAAEC,QAAQ,EAAE;MAAO,CAAE;MACpD,WAAW,EAAC,gCAAO;MACnB,UAAU;MACV,oBAAoB;MACpB,oBAAoB;IAAA,GAEnBvF,KAAK,CAACwF,cAAc,CAAC5D,GAAG,CACvB,UAAC6D,gBAAgB,EAAEzC,KAAK,EAAK;MAC3B,IAAIyC,gBAAgB,CAAC/D,EAAE,EAAE;QACvB,OAAOH,kBAAkB,CAACkE,gBAAgB,CAAC;MAC7C;MACA,oBACE,6BAAC,QAAQ;QACP,QAAQ;QACR,KAAK,EAAEA,gBAAgB,CAAC,WAAW,CAAE;QACrC,KAAK,EAAEA,gBAAgB,CAAC,WAAW,CAAE;QACrC,GAAG,EAAEA,gBAAgB,CAAC,WAAW;MAAE,GAElCA,gBAAgB,CACfA,gBAAgB,CAAC,WAAW,CAAC,CAC9B,CAAC7D,GAAG,CAAC,UAAAJ,SAAS,EAAI;QACjB,OAAOD,kBAAkB,CAACC,SAAS,CAAC;MACtC,CAAC,CAAC,CACO;IAEf,CAAC,CACF,CACU,CACd,CACI,CACH,eACN,2CAASjC,MAAM,CAACS,KAAK,CAACoF,WAAW,CAACC,YAAY,EAAErG,IAAI,CAACW,KAAK,CAAC,eACzD,6BAAC,IAAI;MACH,KAAK,eACH,8FAEE;QAAS,KAAK,EAAC;MAA8B,gBAC3C;QAAM,IAAI,EAAC;MAAmB,EAAG,CACzB;IAEb,GAEAoC,aAAa,eACZ;MACE,eAAe,EAAE,GAAI;MACrB,iBAAiB,EAAE;IAAI,EACvB,CACH,CACI,CACH,EAELS,SAAS,iBACR,6BAAC,eAAQ;MAAC,GAAG,EAAC;IAAM,gBAClB,2CAASjD,MAAM,CAACS,KAAK,CAACoF,WAAW,CAACC,YAAY,EAAErG,IAAI,CAACW,KAAK,CAAC,eACzD,6BAAC,IAAI;MAAC,KAAK,EAAE;IAAU,GACpBuC,cAAc,eACb;MACE,eAAe,EAAE,GAAI;MACrB,iBAAiB,EAAE;IAAI,EACvB,CACH,CACI,CACH,EACLC,WAAW,iBACV,yEACE,2CACM5C,MAAM,CAACS,KAAK,CAACoF,WAAW,CAACC,YAAY,EAAErG,IAAI,CAACU,MAAM,CAAC,eAEvD,6BAAC,IAAI;MACH,KAAK,eACH,kEAEE;QAAS,KAAK,EAAC;MAA0B,gBACvC;QAAM,IAAI,EAAC;MAAmB,EAAG,CACzB;IAEb,GAEA0C,MAAM,eAAC,6BAAC,oBAAW;MAAC,WAAW,EAAE;IAAQ,EAAG,CAAC,CACzC,CACH,eACN,2CACM7C,MAAM,CAACS,KAAK,CAACoF,WAAW,CAACC,YAAY,EAAErG,IAAI,CAACU,MAAM,CAAC,eAEvD,6BAAC,IAAI;MAAC,KAAK,eAAE;IAAmB,GAC7B4C,QAAQ,eAAC,6BAAC,oBAAW;MAAC,WAAW,EAAE;IAAG,EAAG,CAAC,CACtC,CACH,CAET,CAEJ,CAEG,CACA,EACP6C,cAAc,CAACnE,MAAM,iBACpB,6BAAC,KAAK;MAAC,WAAW;MAAC,MAAM,EAAE,OAAQ;MAAC,GAAG,EAAC;IAAG,GACxCmE,cAAc,CAElB,CACQ,CACN,CACN;EACH,CAAC,CACQ;AAEf,CAAC,CAAC;AACFrF,eAAe,CAAC4F,WAAW,GAAG,yBAAyB;AAAC,4BACzCC,cAAK,CAACC,IAAI,CACvBhG,MAAM,CAAuB;EAC3BiG,cAAc,0BAAC7F,KAAK,EAAE8F,aAAa,EAAEC,SAAS,EAAE;IAC9C,IAAMC,KAAK,GAAGlF,MAAM,CAACC,IAAI,CAAC+E,aAAa,CAAC,CAAC,CAAC,CAAC;IAC3C,IAAI,CAACE,KAAK,EAAE;MACV;IACF;IACA,IAAMC,KAAK,GAAGH,aAAa,CAACE,KAAK,CAAC;IAElC,IAAIA,KAAK,KAAK,aAAa,EAAE;MAC3BhG,KAAK,CAACkG,gBAAgB,CAACD,KAAK,CAAC;IAC/B,CAAC,MAAM;MACLjG,KAAK,CAACmG,iBAAiB,CAACH,KAAK,EAAED,SAAS,CAACC,KAAK,CAAC,CAAC;IAClD;EACF,CAAC;EACDI,cAAc,0BAACpG,KAAK,EAAEqG,MAAM,EAAE,CAAC;AACjC,CAAC,CAAC,CAACvG,eAAe,CAAC,CACpB;AAAA"}